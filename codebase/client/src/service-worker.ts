/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, StaleWhileRevalidate } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Handle menu file requests
{
  const maxNumMenusCached = 10;
  const maxAgeOfMenusSeconds = 60 * 60 * 24 * 35; // 5 weeks
  registerRoute(
    ({ url }) => {
      const keyInfo = extractKeyInfoFromUrl();
      if (keyInfo === null) {
        return false;
      }

      const { hostname, fileExtension, storageCollection } = keyInfo;
      const cloudStorageHostname = 'firebasestorage.googleapis.com';
      const menusStorageCollectionName = 'menus';

      const doesUrlMatch: boolean =
        hostname === cloudStorageHostname &&
        fileExtension === 'pdf' &&
        storageCollection === menusStorageCollectionName;
      return doesUrlMatch;

      function extractKeyInfoFromUrl(): StorageRequestInfo | null {
        // const exampleMatchedPath =
        // 'https://firebasestorage.googleapis.com/v0/b/pwa-sandbox-7ecde.appspot.com/o/menus%2FRXiePc.pdf?alt=media&token=bc7f382d-bfb9-4f67-b283-e1bc9f6aad95';

        const pathSegments: string[] = url.pathname.split('/');

        {
          const expectedNumberOfParts = 5;
          if (pathSegments.length < expectedNumberOfParts) {
            return null;
          }
        }

        const hostname = url.hostname;

        const appIdSegment = pathSegments[3];
        const appId = appIdSegment.split('.')[0]; // No need to check if the string at this index exists; this array always contains at least one string

        const storageRefSegment = pathSegments[5];
        const storageRefSegmentParts = storageRefSegment.split('.');

        {
          const expectedNumberOfParts = 2;
          if (storageRefSegmentParts.length < expectedNumberOfParts) {
            return null;
          }
        }
        const fileExtension = storageRefSegmentParts[1];
        const filePath = storageRefSegmentParts[0];
        const forwardSlashUrlEnc = '%2F';
        const storageCollection = filePath.split(forwardSlashUrlEnc)[0];

        return {
          hostname,
          appId,
          fileExtension,
          storageCollection,
        };
      }
      type StorageRequestInfo = {
        hostname: string;
        appId: string;
        fileExtension: string;
        storageCollection: string;
      };
    },
    new NetworkFirst({
      cacheName: 'menus',
      plugins: [
        new ExpirationPlugin({
          maxEntries: maxNumMenusCached,
          maxAgeSeconds: maxAgeOfMenusSeconds,
        }),
      ],
    })
  );
}

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
